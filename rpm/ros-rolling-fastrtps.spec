%bcond_without tests
%bcond_without weak_deps

%global __os_install_post %(echo '%{__os_install_post}' | sed -e 's!/usr/lib[^[:space:]]*/brp-python-bytecompile[[:space:]].*$!!g')
%global __provides_exclude_from ^/opt/ros/rolling/.*$
%global __requires_exclude_from ^/opt/ros/rolling/.*$

Name:           ros-rolling-fastrtps
Version:        2.10.1
Release:        1%{?dist}%{?release_suffix}
Summary:        ROS fastrtps package

License:        Apache 2.0
URL:            https://www.eprosima.com/
Source0:        %{name}-%{version}.tar.gz

Requires:       %{name}-runtime%{?_isa?} = %{version}-%{release}
Requires:       openssl-devel
Requires:       python%{python3_pkgversion}-devel
Requires:       ros-rolling-fastcdr-devel
Requires:       ros-rolling-foonathan-memory-vendor-devel
Requires:       tinyxml2-devel
Provides:       %{name}-devel = %{version}-%{release}
Provides:       %{name}-doc = %{version}-%{release}

%description
*eprosima Fast DDS* (formerly Fast RTPS) is a C++ implementation of the DDS
(Data Distribution Service) standard of the OMG (Object Management Group).
eProsima Fast DDS implements the RTPS (Real Time Publish Subscribe) protocol,
which provides publisher-subscriber communications over unreliable transports
such as UDP, as defined and maintained by the Object Management Group (OMG)
consortium. RTPS is also the wire interoperability protocol defined for the Data
Distribution Service (DDS) standard. *eProsima Fast DDS* expose an API to access
directly the RTPS protocol, giving the user full access to the protocol
internals.

%package runtime
Summary:        Runtime-only files for fastrtps package
Requires:       openssl-devel
Requires:       python%{python3_pkgversion}-devel
Requires:       ros-rolling-fastcdr-runtime
Requires:       ros-rolling-foonathan-memory-vendor-runtime
Requires:       tinyxml2-devel
Requires:       ros-rolling-ros-workspace-runtime
BuildRequires:  asio-devel
BuildRequires:  cmake3
BuildRequires:  openssl-devel
BuildRequires:  python%{python3_pkgversion}-devel
BuildRequires:  ros-rolling-fastcdr-devel
BuildRequires:  ros-rolling-foonathan-memory-vendor-devel
BuildRequires:  tinyxml2-devel
BuildRequires:  ros-rolling-ros-workspace-devel

%description runtime
Runtime-only files for fastrtps package

%prep
%autosetup -p1

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/rolling/setup.sh" ]; then . "/opt/ros/rolling/setup.sh"; fi
mkdir -p .obj-%{_target_platform} && cd .obj-%{_target_platform}
%cmake3 \
    -UINCLUDE_INSTALL_DIR \
    -ULIB_INSTALL_DIR \
    -USYSCONF_INSTALL_DIR \
    -USHARE_INSTALL_PREFIX \
    -ULIB_SUFFIX \
    -DCMAKE_INSTALL_PREFIX="/opt/ros/rolling" \
    -DCMAKE_PREFIX_PATH="/opt/ros/rolling" \
    -DSETUPTOOLS_DEB_LAYOUT=OFF \
%if !0%{?with_tests}
    -DBUILD_TESTING=OFF \
%endif
    -DINSTALL_EXAMPLES=OFF \
    -DSECURITY=ON \
    -DAPPEND_PROJECT_NAME_TO_INCLUDEDIR=ON \
    ..

%make_build

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/rolling/setup.sh" ]; then . "/opt/ros/rolling/setup.sh"; fi
%make_install -C .obj-%{_target_platform}

for f in \
    /opt/ros/rolling/include/ \
    /opt/ros/rolling/share/ament_index/resource_index/packages/ \
    /opt/ros/rolling/share/fastrtps/cmake/ \
    /opt/ros/rolling/share/fastrtps/package.dsv \
    /opt/ros/rolling/share/fastrtps/package.xml \
; do
    if [ -e %{buildroot}$f ]; then echo $f; fi
done > devel_files

%if 0%{?with_tests}
%check
# Look for a Makefile target with a name indicating that it runs tests
TEST_TARGET=$(%__make -qp -C .obj-%{_target_platform} | sed "s/^\(test\|check\):.*/\\1/;t f;d;:f;q0")
if [ -n "$TEST_TARGET" ]; then
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree and source it.  It will set things like
# CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/rolling/setup.sh" ]; then . "/opt/ros/rolling/setup.sh"; fi
CTEST_OUTPUT_ON_FAILURE=1 \
    %make_build -C .obj-%{_target_platform} $TEST_TARGET || echo "RPM TESTS FAILED"
else echo "RPM TESTS SKIPPED"; fi
%endif

%files -f devel_files

%files runtime
%license LICENSE
/opt/ros/rolling
%exclude /opt/ros/rolling/include/
%exclude /opt/ros/rolling/share/ament_index/resource_index/packages/
%exclude /opt/ros/rolling/share/fastrtps/cmake
%exclude /opt/ros/rolling/share/fastrtps/package.dsv
%exclude /opt/ros/rolling/share/fastrtps/package.xml

%changelog
* Tue Apr 04 2023 Miguel Company <miguelcompany@eprosima.com> - 2.10.1-1
- Autogenerated by Bloom

* Fri Mar 31 2023 Miguel Company <miguelcompany@eprosima.com> - 2.10.0-1
- Autogenerated by Bloom

* Fri Mar 24 2023 Miguel Company <miguelcompany@eprosima.com> - 2.9.1-4
- Autogenerated by Bloom

* Tue Mar 21 2023 Miguel Company <miguelcompany@eprosima.com> - 2.9.1-3
- Autogenerated by Bloom

